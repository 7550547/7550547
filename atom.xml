<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑天俊的个人博客</title>
  
  <subtitle>zheng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://7550547.github.io./"/>
  <updated>2020-09-17T10:24:04.347Z</updated>
  <id>https://7550547.github.io./</id>
  
  <author>
    <name>郑天俊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java笔记9.6</title>
    <link href="https://7550547.github.io./2020/09/06/Java%E7%AC%94%E8%AE%B09-6/"/>
    <id>https://7550547.github.io./2020/09/06/Java%E7%AC%94%E8%AE%B09-6/</id>
    <published>2020-09-06T11:27:19.000Z</published>
    <updated>2020-09-17T10:24:04.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h2><h3 id="1-1、接口概述"><a href="#1-1、接口概述" class="headerlink" title="1.1、接口概述"></a>1.1、接口概述</h3><p>接口就是一种<em>公共的规范标准</em>，只有符合规范标准，大家都通过Java中的接口更多的体现在对行为的抽象</p><h3 id="1-2、接口的特点"><a href="#1-2、接口的特点" class="headerlink" title="1.2、接口的特点"></a>1.2、接口的特点</h3><ul><li>接口用关键字interface修饰<br>public interface 接口名 {}</li><li>类实现接口用implements表示<br>public class 类名 implements 接口名 {}</li><li>接口不能实例化<blockquote><p>接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态</p></blockquote></li></ul><hr><blockquote><p>多态的形式：具体类多态，抽象类多态，接口多态</p></blockquote><hr><blockquote><p>多态的前提：有继承或者实现关系；有方法重写；有父（类/对象）指向子类对象</p></blockquote><h3 id="1-3、接口中的成员特点"><a href="#1-3、接口中的成员特点" class="headerlink" title="1.3、接口中的成员特点"></a>1.3、接口中的成员特点</h3><p>成员变量</p><ul><li>只能是常量</li><li>默认修饰符：public static final<br>构造方法</li><li>接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在</li><li>一个类如果没有继承父类，则默认继承Object类<br>成员方法</li><li>只能是抽象方法</li><li>默认修饰符：public abstract</li></ul>]]></content>
    
    <summary type="html">
    
      接口
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>用Java实现五子棋</title>
    <link href="https://7550547.github.io./2020/08/15/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E4%BA%94%E5%AD%90%E6%A3%8B/"/>
    <id>https://7550547.github.io./2020/08/15/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E4%BA%94%E5%AD%90%E6%A3%8B/</id>
    <published>2020-08-15T11:22:09.000Z</published>
    <updated>2020-08-15T11:22:09.567Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java笔记8.15</title>
    <link href="https://7550547.github.io./2020/08/15/java%E7%AC%94%E8%AE%B08-15/"/>
    <id>https://7550547.github.io./2020/08/15/java%E7%AC%94%E8%AE%B08-15/</id>
    <published>2020-08-15T02:26:41.000Z</published>
    <updated>2020-09-18T08:23:02.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、多态"><a href="#1、多态" class="headerlink" title="1、多态"></a>1、多态</h2><h3 id="1-1、多态概述"><a href="#1-1、多态概述" class="headerlink" title="1.1、多态概述"></a>1.1、多态概述</h3><p>同一个对象，在不同时刻表现出来的不同形态</p><p><strong>举例：猫</strong></p><p>我们可以说猫是猫：猫 cat = new 猫（）</p><p>我们也可以说猫是动物：动物 animal = new 猫（）</p><p>这里猫在不同时刻表现出不同形态，这就是多态</p><p><strong>多态的前提和体现</strong></p><ul><li>有继承/实现关系</li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><h3 id="1-2、多态中成员访问的特点"><a href="#1-2、多态中成员访问的特点" class="headerlink" title="1.2、多态中成员访问的特点"></a>1.2、多态中成员访问的特点</h3><ul><li>成员变量：编译看左边，执行看左边</li><li>成员方法：编译看左边，执行看右边</li></ul><p>玩什么成员方法和成员变量访问不一样呢？</p><ul><li>因为成员方法有重写，而成员变量没有</li></ul><h2 id="2、抽象类"><a href="#2、抽象类" class="headerlink" title="2、抽象类"></a>2、抽象类</h2><h3 id="1、Java-抽象类"><a href="#1、Java-抽象类" class="headerlink" title="1、Java 抽象类"></a>1、Java 抽象类</h3><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p><p>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。</p><p>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。</p><p>父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。</p><p>在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p><h3 id="2、抽象类的特点"><a href="#2、抽象类的特点" class="headerlink" title="2、抽象类的特点"></a>2、抽象类的特点</h3><ul><li><p>抽象类和抽象方法必须使用<em>abstract</em>关键词修饰<br>public abstract class 类名（）;<br>public abstract void eat（）;</p><ul><li>抽象类中不一定有抽象方法，而有抽象方法的类一定是抽象类</li><li>抽象类不能实例化</li><li>抽象类的子类<br>要么重写抽象类中的所有抽象方法<br>要么是抽象类</li></ul><h3 id="3、抽象类的成员特点"><a href="#3、抽象类的成员特点" class="headerlink" title="3、抽象类的成员特点"></a>3、抽象类的成员特点</h3><ul><li>成员变量<br>可以是变量，也可以是常量</li><li>构造方法<br>有构造方法，但不能实例化</li><li>成员方法<br>可以有抽象方法，限定子类必须完成某些动作，也可以有非抽象方法，提高代码复用性</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      8.15 笔记 多态
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java笔记8.14</title>
    <link href="https://7550547.github.io./2020/08/14/java%E7%AC%94%E8%AE%B08-14/"/>
    <id>https://7550547.github.io./2020/08/14/java%E7%AC%94%E8%AE%B08-14/</id>
    <published>2020-08-14T11:34:48.000Z</published>
    <updated>2020-09-18T08:25:04.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><h3 id="1、导包的概述与使用"><a href="#1、导包的概述与使用" class="headerlink" title="1、导包的概述与使用"></a>1、导包的概述与使用</h3><p>使用不同包下的类时，使用的时候要写全类的全路径，写起来太麻烦了，为了简化带包的操作，Java就提供了导包的功能。</p><h3 id="2、导包的格式"><a href="#2、导包的格式" class="headerlink" title="2、导包的格式"></a>2、导包的格式</h3><ul><li>格式：import包名；</li><li>范例：import java.util.Scanner;</li></ul><h2 id="2、修饰符"><a href="#2、修饰符" class="headerlink" title="2、修饰符"></a>2、修饰符</h2><h3 id="1、修饰符的分类"><a href="#1、修饰符的分类" class="headerlink" title="1、修饰符的分类"></a>1、修饰符的分类</h3><ul><li>权限修饰符</li><li>状态修饰符</li></ul><h2 id="3、权限修饰符"><a href="#3、权限修饰符" class="headerlink" title="3、权限修饰符"></a>3、权限修饰符</h2><table><thead><tr><th>修饰符</th><th>同一个类中</th><th>同一个包中子类无关类</th><th>不同包的子类</th><th>不同包的无关类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>默认</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h2 id="4、状态修饰符"><a href="#4、状态修饰符" class="headerlink" title="4、状态修饰符"></a>4、状态修饰符</h2><h3 id="1、final"><a href="#1、final" class="headerlink" title="1、final"></a>1、final</h3><p>final修饰符是最后的意思，可以修饰成员方法，成员变量，类</p><blockquote><p> final修饰的特点</p></blockquote><ul><li>修饰方法：表明该方法是最终方法不能被重写</li><li>修饰变量：表明该变量是常量，不能在被赋值</li><li>修饰类：表明类是最终类不能在被继承<h3 id="2、final修饰局部变量"><a href="#2、final修饰局部变量" class="headerlink" title="2、final修饰局部变量"></a>2、final修饰局部变量</h3></li><li>变量是基本类型：final修饰指的是基本类型的数据值不能发生改变</li><li>变量引用类型：final修饰指的是引用类型的地址值不能发生改变，但是地址里面的内容可以发生改变</li></ul><h3 id="3、static修饰符"><a href="#3、static修饰符" class="headerlink" title="3、static修饰符"></a>3、static修饰符</h3><p>static是静态的意思，可以修饰成员方法、成员变量</p><blockquote><p>static修饰的特点</p></blockquote><ul><li>被类的所有对象共享<br>  ，这也是我们判断是否使用静态关键字的条件</li><li>可以通过类名调用<br>也可以通过对象名调用，推荐使用类名调用</li></ul><h3 id="4、static的访问特点"><a href="#4、static的访问特点" class="headerlink" title="4、static的访问特点"></a>4、static的访问特点</h3><blockquote><p>非静态的成员方法</p></blockquote><ul><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li><li>能访问静态的成员方法</li><li>能访问非静态的成员变量</li></ul><blockquote><p>静态的成员方法</p></blockquote><ul><li>能访问静态的成员方法</li><li>能访问静态的成员方法</li></ul><p><strong>总结成一句话就是：静态成员方法只能访问静态成法</strong></p>]]></content>
    
    <summary type="html">
    
      8.14 笔记
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java笔记8.8</title>
    <link href="https://7550547.github.io./2020/08/08/java%E7%AC%94%E8%AE%B08-8/"/>
    <id>https://7550547.github.io./2020/08/08/java%E7%AC%94%E8%AE%B08-8/</id>
    <published>2020-08-08T13:33:41.000Z</published>
    <updated>2020-08-14T11:31:52.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="1、老师与学生"><a href="#1、老师与学生" class="headerlink" title="1、老师与学生"></a>1、老师与学生</h3><p>需求：定义老师类和学生类，然后写代码测试；最后找到老师类和学生类当中的共性内容，抽取一个父类，用继承的方式改写代码，并进行测试。</p><hr><p>思路：</p><ul><li>1、定义老师类（姓名、年龄、教书）</li><li>2、定义学生类（姓名、年龄、学习）</li><li>3、定义测试类，写代码测试</li><li>4、共性抽取父类，定义人（姓名、年龄）</li><li>5、定义老师类，继承人类，并给出自己特有的方法：教书（）</li><li>6、定义学生类，继承人类，并给出自己特有的方法：学习（）</li><li>7、定义测试类，写代码测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package test2.java;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Person()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package test2.java;</span><br><span class="line"></span><br><span class="line">public class Teacher extends Person&#123;</span><br><span class="line">    public Teacher()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Teacher(String name,int age) &#123;</span><br><span class="line">        &#x2F;&#x2F; this.name&#x3D;name;</span><br><span class="line">        &#x2F;&#x2F; this.age&#x3D;age;</span><br><span class="line">        super(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    public void teach()&#123;</span><br><span class="line">        System.out.println(&quot;用爱成就每一位学员&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package test2.java;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 测试类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class PersonDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建老师类对象并进行测试</span><br><span class="line">        Teacher t1&#x3D;new Teacher();</span><br><span class="line">        t1.setName(&quot;赵老师&quot;);</span><br><span class="line">        t1.setAge(30);</span><br><span class="line">        System.out.println(t1.getName()+&quot;,&quot;+t1.getAge());</span><br><span class="line">        t1.teach();</span><br><span class="line"></span><br><span class="line">        Teacher t2&#x3D;new Teacher(&quot;张老师&quot;,33);</span><br><span class="line">        System.out.println(t2.getName()+&quot;,&quot;+t2.getAge());</span><br><span class="line">        t2.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、猫和狗"><a href="#2、猫和狗" class="headerlink" title="2、猫和狗"></a>2、猫和狗</h3>需求：采用继承的思想实现猫和狗的案例<br>分析：<blockquote><p>1、猫</p></blockquote></li><li>成员变量：姓名，年龄</li><li>构造方法:无参，带参</li><li>成员方法：get/set方法，抓老鼠（）<blockquote><p>2、狗</p></blockquote></li><li>成员变量：姓名，年龄</li><li>构造方法:无参，带参</li><li>成员方法：get/set方法，看门（）<blockquote><p>3、共性</p></blockquote></li><li>成员变量：姓名，年龄；构造方法:无参，带参；成员方法：get/set方法。</li></ul><p>思路：</p><ul><li>1、定义动物类（Animal)</li><li>2、定义猫类（Cat），继承动物类</li><li>3、定义狗类（Dog），继承动物类<br>分别常见4个Java文件Animal、Cat、Dog、AnimalDemo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package test3.java;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class Animal &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Animal()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public Animal(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package test3.java;</span><br><span class="line"></span><br><span class="line">public class Cat extends Animal&#123;</span><br><span class="line">    public Cat()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public Cat(String name, int age) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    public void catchMouse()&#123;</span><br><span class="line">        System.out.println(&quot;猫抓老鼠&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package test3.java;</span><br><span class="line"></span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line">    public Dog(String name, int age) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    public void lookDoor()&#123;</span><br><span class="line">        System.out.println(&quot;狗看门&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package test3.java;</span><br><span class="line">&#x2F;*</span><br><span class="line">* 测试类</span><br><span class="line">* *&#x2F;</span><br><span class="line">public class AnimalDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建猫类对象进行测试</span><br><span class="line">        Cat c1 &#x3D; new Cat();</span><br><span class="line">        c1.setName(&quot;加菲猫&quot;);</span><br><span class="line">        c1.setAge(5);</span><br><span class="line">        System.out.println(c1.getName()+&quot;,&quot;+c1.getAge());</span><br><span class="line">        c1.catchMouse();</span><br><span class="line"></span><br><span class="line">        Cat c2&#x3D;new Cat(&quot;加菲猫&quot;,5);</span><br><span class="line">        System.out.println(c2.getName()+&quot;,&quot;+c2.getAge());</span><br><span class="line">        c2.catchMouse();</span><br><span class="line"></span><br><span class="line">        Dog c3 &#x3D; new Dog(&quot;馒头&quot;,5);</span><br><span class="line">        System.out.println(c3.getName()+&quot;,&quot;+c3.getAge());</span><br><span class="line">        c3.lookDoor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      案例
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java笔记</title>
    <link href="https://7550547.github.io./2020/08/06/java%E7%AC%94%E8%AE%B0/"/>
    <id>https://7550547.github.io./2020/08/06/java%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-06T11:30:59.000Z</published>
    <updated>2020-08-08T13:32:36.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="1、继承的格式"><a href="#1、继承的格式" class="headerlink" title="1、继承的格式"></a>1、继承的格式</h3><ul><li>格式：public class 子类名 extends 父类名 {}</li><li>范例：public class Zi extends Fu {}</li><li>Fu：是父类，也被称为基类、超类。</li><li>Zi：是子类，也被称为派生类。<br>分别创建3个Java文件:Fu、Zi、Demo.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.java;</span><br><span class="line"></span><br><span class="line">    public class Fu &#123;</span><br><span class="line">        public void show() &#123;</span><br><span class="line">            System.out.println(&quot;show方法被调用&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.java;</span><br><span class="line"></span><br><span class="line">public class Zi extends Fu&#123;</span><br><span class="line">    public void method()&#123;</span><br><span class="line">        System.out.println(&quot;method方法被调用&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.java;</span><br><span class="line">&#x2F;*</span><br><span class="line">测试类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建对象，调用方法</span><br><span class="line">        Fu f &#x3D; new Fu();</span><br><span class="line">        f.show();</span><br><span class="line">        Zi z &#x3D; new Zi();</span><br><span class="line">        z.method();</span><br><span class="line">        z.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show方法被调用</span><br><span class="line">method方法被调用</span><br><span class="line">show方法被调用</span><br></pre></td></tr></table></figure><h3 id="2、继承的好处和弊端"><a href="#2、继承的好处和弊端" class="headerlink" title="2、继承的好处和弊端"></a>2、继承的好处和弊端</h3>继承好处</li><li>提高了代码的复用性（多个类相同的成员可以放入同一个类中）</li><li>提高了代码的维护性（如果代码需要修改，只须修改一处）<br>继承弊端</li><li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时，子类不得不发生变化，削弱了子类的独立性。<h3 id="3、继承中变量的访问特点"><a href="#3、继承中变量的访问特点" class="headerlink" title="3、继承中变量的访问特点"></a>3、继承中变量的访问特点</h3>在子类方法中访问一个变量</li><li>子类局部范围找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>如果都没有就报错<h3 id="4、super"><a href="#4、super" class="headerlink" title="4、super"></a>4、super</h3></li></ul><p><em>super</em>关键字的用法和<em>this</em>关键字的用法相似</p><ul><li>this代表本类对象的使用</li><li>super代表父类存储空间的标识（可以理解为父类对象引用）</li></ul><table><thead><tr><th>关键字</th><th>访问成员变量</th><th>访问构造方法</th><th>访问成员方法</th></tr></thead><tbody><tr><td>this</td><td>this.成员变量，访问本类成员变量</td><td>this（…）访问本类构造方法</td><td>this.成员方法（…）访问本类成员方法</td></tr><tr><td>super</td><td>super.成员变量，访问父类成员变量</td><td>super（…）访问父类构造方法</td><td>super.成员方法（…）访问父类成员方法</td></tr></tbody></table><h3 id="5、继承中构造方法中的访问特点"><a href="#5、继承中构造方法中的访问特点" class="headerlink" title="5、继承中构造方法中的访问特点"></a>5、继承中构造方法中的访问特点</h3><p>子类中所有的构造方法都会默认访问父类中的无参的构造方法</p><ul><li>因为子类会继承父类中的数据，可能还会使用父类中的数据，所以子类数据初始化之前，一定要完成父类数据的初始化</li><li>每一个子类构造方法第一条语句默认都是super（）<br>代码为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.java;</span><br><span class="line"></span><br><span class="line">    public class Fu &#123;</span><br><span class="line">        public Fu() &#123;</span><br><span class="line">            System.out.println(&quot;Fu中无参方法被调用&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Fu(int age) &#123;</span><br><span class="line">            System.out.println(&quot;Fu中有参方法被调用&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.java;</span><br><span class="line"></span><br><span class="line">public class Zi extends Fu&#123;</span><br><span class="line">    public Zi()&#123;</span><br><span class="line">        &#x2F;&#x2F; super（）;</span><br><span class="line">        super(20);&#x2F;&#x2F;括号中无age</span><br><span class="line">        System.out.println(&quot;Zi中无参构造方法被调用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public Zi(int age)&#123;</span><br><span class="line">        &#x2F;&#x2F; super（）;</span><br><span class="line">        super(20);</span><br><span class="line">        System.out.println(&quot;Zi中带参构造方法被调用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.java;</span><br><span class="line">&#x2F;*</span><br><span class="line">测试类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建对象，调用方法</span><br><span class="line">        Zi z &#x3D; new Zi();</span><br><span class="line">        Zi z2 &#x3D; new Zi(20);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fu中有参方法被调用</span><br><span class="line">Zi中无参构造方法被调用</span><br><span class="line">Fu中有参方法被调用</span><br><span class="line">Zi中带参构造方法被调用</span><br></pre></td></tr></table></figure></li></ul><h3 id="6、继承中成员方法的访问特点"><a href="#6、继承中成员方法的访问特点" class="headerlink" title="6、继承中成员方法的访问特点"></a>6、继承中成员方法的访问特点</h3><p>类似于变量的访问特点</p><blockquote><p>通过子类对象访问一个方法</p></blockquote><ul><li>子类成员范围找</li><li>父类成员范围找</li><li>如果都没有就报错（不考虑父类的父类）<h3 id="7、方法重写"><a href="#7、方法重写" class="headerlink" title="7、方法重写"></a>7、方法重写</h3>方法重写描述</li><li>子类出现和父类中一样的方法声明</li></ul><p>方法重写的应用</p><ul><li>当子类需要父类的功能，而功能主体子类有自己特有的内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特的有内容</li><li>练习：手机类和新手机类<br>代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package test.java;</span><br><span class="line">&#x2F;*</span><br><span class="line">手机类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class phone &#123;</span><br><span class="line">    public void call(String name)&#123;</span><br><span class="line">        System.out.println(&quot;给&quot;+name+&quot;打电话&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package test.java;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 新手机</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class newPhone extends phone &#123;</span><br><span class="line">    @Override&#x2F;&#x2F;帮助我们检查重写方法声明的正确性</span><br><span class="line">    public void call(String name)&#123;</span><br><span class="line">        System.out.println(&quot;开启视频功能&quot;);</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;给&quot;+name+&quot;打电话&quot;);</span><br><span class="line">        super.call(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package test.java;</span><br><span class="line">&#x2F;*</span><br><span class="line">测试类</span><br><span class="line">*&#x2F;</span><br><span class="line">public class phoneDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;        创建对象，调用方法</span><br><span class="line">        phone p &#x3D; new phone();</span><br><span class="line">        p.call(&quot;李白&quot;);</span><br><span class="line">        System.out.println(&quot;------&quot;);</span><br><span class="line">        newPhone np &#x3D; new newPhone();</span><br><span class="line">        np.call(&quot;李白&quot;);</span><br><span class="line">        &#x2F;&#x2F;System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、方法重写的注意事项"><a href="#8、方法重写的注意事项" class="headerlink" title="8、方法重写的注意事项"></a>8、方法重写的注意事项</h3></li><li>私有方法不能被重写（父类私有成员子类是不能继承的）</li><li>子类方法访问权限不能更低（public&gt;默认&gt;私有）</li></ul><h3 id="9、Java中继承的注意事项"><a href="#9、Java中继承的注意事项" class="headerlink" title="9、Java中继承的注意事项"></a>9、Java中继承的注意事项</h3><ul><li>Java中类只支持单继承，不支持多继承</li><li>Java中类支持多层继承</li></ul>]]></content>
    
    <summary type="html">
    
      8月6号Java学习笔记
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络笔记</title>
    <link href="https://7550547.github.io./2020/08/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    <id>https://7550547.github.io./2020/08/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-03T11:59:01.000Z</published>
    <updated>2020-08-03T12:07:28.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>   wu</p>]]></content>
    
    <summary type="html">
    
      本复习笔记基于《计算机网络自顶向下的方法》所整理的笔记，由于水平有限，还请见谅。
    
    </summary>
    
    
    
      <category term="笔记" scheme="https://7550547.github.io./tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://7550547.github.io./2020/08/03/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://7550547.github.io./2020/08/03/markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2020-08-03T10:19:13.000Z</published>
    <updated>2020-08-03T11:49:32.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级表体</span><br><span class="line">最多6级标题</span><br></pre></td></tr></table></figure><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><blockquote><ul><li><strong>加粗</strong><br>加粗的字体左右用2个*包括起来</li><li><em>斜体</em><br>要倾斜的文字左右分别用一个*号包起来</li><li><strong><em>斜体加粗</em></strong><br>要倾斜和加粗的文字左右分别用三个*号包起来</li><li><del>删除线</del><br>要加删除线的文字左右分别用两个~~号包起来</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…</p><blockquote><p>引用内容</p><blockquote><p>引用内容</p><blockquote><p>引用内容</p><blockquote><p>引用内容</p></blockquote></blockquote></blockquote></blockquote><hr><hr><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p><hr><hr><h2 id="五、插入图片"><a href="#五、插入图片" class="headerlink" title="五、插入图片"></a>五、插入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/03/aaHMZR.jpg" alt="图片"></p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a><a href="https://imgchr.com/" target="_blank" rel="noopener">图床</a></h3><hr><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 一级</span><br><span class="line">   - 二级</span><br><span class="line">   - 二级</span><br></pre></td></tr></table></figure><p> 效果</p><ul><li>一级<ul><li>二级</li><li>二级 </li></ul><hr><h2 id="八、代码"><a href="#八、代码" class="headerlink" title="八、代码"></a>八、代码</h2><h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3>  <code>代码内容</code><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码之间分别用三个反引号&#96;&#96;&#96;包起来，且两边的反引号单独占一行</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><blockquote><ul><li>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</li></ul></blockquote><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3>略  </li></ul><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><ul><li><input disabled="" type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li><li><input checked="" disabled="" type="checkbox"> 任务二 已做任务 `- + 空格 + [x]<h2 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h2><blockquote><ul><li>hack方法</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#x2F;&#x2F;]: # (哈哈我是最强注释，不会在浏览器中显示。)</span><br><span class="line">[^_^]: # (哈哈我是最萌注释，不会在浏览器中显示。)</span><br><span class="line">[&#x2F;&#x2F;]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class="line">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure></li></ul><h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>语法说明：</p><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p>注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2]。</span><br><span class="line"></span><br><span class="line">[^1]:Markdown是一种纯文本标记语言</span><br><span class="line"></span><br><span class="line">[^2]:HyperText Markup Language 超文本标记语言</span><br></pre></td></tr></table></figure><p>参考文献</p><blockquote><ul><li><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a></li><li><a href="https://www.jianshu.com/p/ebe52d2d468f" target="_blank" rel="noopener">https://www.jianshu.com/p/ebe52d2d468f</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      自己整理的一些markdown语法，便于自己查找
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020,8,3 笔记</title>
    <link href="https://7550547.github.io./2020/08/03/2020-8-3-%E7%AC%94%E8%AE%B0/"/>
    <id>https://7550547.github.io./2020/08/03/2020-8-3-%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-03T06:10:07.000Z</published>
    <updated>2020-08-03T12:07:36.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h3><p>在文章的front-matter中添加description，其中description中的内容就会被显示在首页上，其余一律不显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">description: 文章概述</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      8，3 ：关于记录配置next主题是遇到的一些问题所作的笔记
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="https://7550547.github.io./2020/07/27/My-New-Post/"/>
    <id>https://7550547.github.io./2020/07/27/My-New-Post/</id>
    <published>2020-07-27T09:35:57.000Z</published>
    <updated>2020-08-03T02:39:25.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在根目录的source文件夹下新建一个CNAME文件，我使用的是Notepad++，内容就写自己的域名，保存时选all type<br>hexo g重新生成一下静态文件<br>hexo d部署上github</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在根目录的source文件夹下新建一个CNAME文件，我使用的是Notepad++，内容就写自己的域名，保存时选all type&lt;br&gt;he
      
    
    </summary>
    
    
      <category term="Diary" scheme="https://7550547.github.io./categories/Diary/"/>
    
    
      <category term="编程" scheme="https://7550547.github.io./tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="感悟" scheme="https://7550547.github.io./tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://7550547.github.io./2020/07/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://7550547.github.io./2020/07/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-07-10T11:41:52.000Z</published>
    <updated>2020-07-29T06:50:19.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是我的第一篇博客 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这是我的第一篇博客 &lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://7550547.github.io./2020/07/02/hello-world/"/>
    <id>https://7550547.github.io./2020/07/02/hello-world/</id>
    <published>2020-07-02T05:22:23.037Z</published>
    <updated>2020-07-02T05:22:23.037Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
